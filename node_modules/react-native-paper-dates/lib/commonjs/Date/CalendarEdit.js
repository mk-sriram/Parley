"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _DatePickerInputWithoutModal = _interopRequireDefault(require("./DatePickerInputWithoutModal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function CalendarEdit({
  mode,
  state,
  label = '',
  startLabel = 'Start',
  endLabel = 'End',
  collapsed,
  onChange,
  validRange,
  locale,
  inputEnabled
}) {
  const dateInput = React.useRef(null);
  const startInput = React.useRef(null);
  const endInput = React.useRef(null);

  // when switching views focus, or un-focus text input
  React.useEffect(() => {
    // hide open keyboard
    if (collapsed) {
      _reactNative.Keyboard.dismiss();
    }
    const inputsToFocus = [dateInput.current, startInput.current].filter(n => n);
    const inputsToBlur = [dateInput.current, startInput.current, endInput.current].filter(n => n);
    if (collapsed) {
      inputsToBlur.forEach(ip => ip.blur());
    } else {
      inputsToFocus.forEach(ip => ip.focus());
    }
  }, [mode, startInput, endInput, dateInput, collapsed]);
  const onSubmitStartInput = React.useCallback(() => {
    if (endInput.current) {
      endInput.current.focus();
    }
  }, [endInput]);
  const onSubmitEndInput = React.useCallback(() => {
    // TODO: close modal and persist range
  }, []);
  const onSubmitInput = React.useCallback(() => {
    // TODO: close modal and persist range
  }, []);
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.root
  }, mode === 'single' ? /*#__PURE__*/React.createElement(_DatePickerInputWithoutModal.default, {
    inputMode: "start",
    ref: dateInput,
    label: label,
    value: state.date,
    onChange: date => onChange({
      ...state,
      date
    }),
    onSubmitEditing: onSubmitInput,
    validRange: validRange,
    locale: locale,
    withModal: false,
    autoComplete: 'off',
    inputEnabled: inputEnabled
  }) : null, mode === 'range' ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.inner
  }, /*#__PURE__*/React.createElement(_DatePickerInputWithoutModal.default, {
    inputMode: "start",
    ref: startInput,
    label: startLabel,
    value: state.startDate,
    onChange: startDate => onChange({
      ...state,
      startDate
    }),
    returnKeyType: 'next',
    onSubmitEditing: onSubmitStartInput,
    validRange: validRange,
    locale: locale,
    withModal: false,
    autoComplete: 'off',
    inputEnabled: inputEnabled
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.separator
  }), /*#__PURE__*/React.createElement(_DatePickerInputWithoutModal.default, {
    inputMode: "end",
    ref: endInput,
    label: endLabel,
    value: state.endDate,
    onChange: endDate => onChange({
      ...state,
      endDate
    }),
    onSubmitEditing: onSubmitEndInput,
    validRange: validRange,
    locale: locale,
    withModal: false,
    autoComplete: "off",
    inputEnabled: inputEnabled
  })) : null);
}
const styles = _reactNative.StyleSheet.create({
  root: {
    padding: 12
  },
  inner: {
    flexDirection: 'row'
  },
  inputContainer: {
    flex: 1
  },
  input: {
    flex: 1
  },
  separator: {
    width: 12
  }
});
var _default = exports.default = /*#__PURE__*/React.memo(CalendarEdit);
//# sourceMappingURL=CalendarEdit.js.map