"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatePickerModalContent = DatePickerModalContent;
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _Calendar = _interopRequireDefault(require("./Calendar"));
var _AnimatedCrossView = _interopRequireDefault(require("./AnimatedCrossView"));
var _DatePickerModalHeader = _interopRequireDefault(require("./DatePickerModalHeader"));
var _DatePickerModalContentHeader = _interopRequireDefault(require("./DatePickerModalContentHeader"));
var _CalendarEdit = _interopRequireDefault(require("./CalendarEdit"));
var _DatePickerModalHeaderBackground = _interopRequireDefault(require("./DatePickerModalHeaderBackground"));
var _reactNativePaper = require("react-native-paper");
var _DatePickerModalStatusBar = _interopRequireDefault(require("./DatePickerModalStatusBar"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function DatePickerModalContent(props) {
  const {
    mode,
    onChange,
    onConfirm,
    onDismiss,
    disableSafeTop,
    disableStatusBar,
    disableWeekDays,
    locale,
    validRange,
    dateMode,
    startYear,
    endYear,
    statusBarOnTopOfBackdrop
  } = props;
  const anyProps = props;

  // use local state to add only onConfirm state changes
  const [state, setState] = React.useState({
    date: anyProps.date,
    startDate: anyProps.startDate,
    endDate: anyProps.endDate,
    dates: anyProps.dates
  });

  // update local state if changed from outside or if modal is opened
  React.useEffect(() => {
    setState({
      date: anyProps.date,
      startDate: anyProps.startDate,
      endDate: anyProps.endDate,
      dates: anyProps.dates
    });
  }, [anyProps.date, anyProps.startDate, anyProps.endDate, anyProps.dates]);
  const [collapsed, setCollapsed] = React.useState(true);
  const onInnerChange = React.useCallback(params => {
    onChange && onChange(params);
    setState(prev => ({
      ...prev,
      ...params
    }));
  }, [onChange, setState]);
  const onInnerConfirm = React.useCallback(() => {
    if (mode === 'single') {
      ;
      onConfirm({
        date: state.date
      });
    } else if (mode === 'range') {
      ;
      onConfirm({
        startDate: state.startDate,
        endDate: state.endDate
      });
    } else if (mode === 'multiple') {
      ;
      onConfirm({
        dates: state.dates || []
      });
    }
  }, [state, mode, onConfirm]);
  const onToggleCollapse = React.useCallback(() => {
    setCollapsed(prev => !prev);
  }, [setCollapsed]);
  const theme = (0, _reactNativePaper.useTheme)();
  const defaultUppercase = !theme.isV3;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_DatePickerModalHeaderBackground.default, null, /*#__PURE__*/React.createElement(_DatePickerModalStatusBar.default, {
    disableSafeTop: !!disableSafeTop,
    disableStatusBar: !!disableStatusBar,
    statusBarOnTopOfBackdrop: !!statusBarOnTopOfBackdrop
  }), /*#__PURE__*/React.createElement(_DatePickerModalHeader.default, {
    locale: locale,
    onSave: onInnerConfirm,
    onDismiss: onDismiss,
    saveLabel: props.saveLabel,
    saveLabelDisabled: props.saveLabelDisabled ?? false,
    uppercase: props.uppercase ?? defaultUppercase,
    closeIcon: props.closeIcon
  }), /*#__PURE__*/React.createElement(_DatePickerModalContentHeader.default, {
    state: state,
    mode: mode,
    collapsed: collapsed,
    onToggle: onToggleCollapse,
    headerSeparator: props.headerSeparator,
    emptyLabel: props.emptyLabel,
    label: props.label,
    moreLabel: props.moreLabel,
    startLabel: props.startLabel,
    endLabel: props.endLabel,
    uppercase: props.uppercase ?? defaultUppercase,
    locale: locale,
    editIcon: props?.editIcon,
    calendarIcon: props.calendarIcon,
    allowEditing: props.allowEditing ?? true
  })), /*#__PURE__*/React.createElement(_AnimatedCrossView.default, {
    collapsed: collapsed,
    calendar: /*#__PURE__*/React.createElement(_Calendar.default, {
      locale: locale,
      mode: mode,
      startDate: state.startDate,
      endDate: state.endDate,
      date: state.date,
      onChange: onInnerChange,
      disableWeekDays: disableWeekDays,
      dates: state.dates,
      validRange: validRange,
      dateMode: dateMode,
      startYear: startYear,
      endYear: endYear
    }),
    calendarEdit: /*#__PURE__*/React.createElement(_CalendarEdit.default, {
      mode: mode,
      state: state,
      label: props.label,
      startLabel: props.startLabel,
      endLabel: props.endLabel,
      collapsed: collapsed,
      onChange: onInnerChange,
      validRange: validRange,
      locale: locale,
      inputEnabled: props.inputEnabled
    })
  }));
}
var _default = exports.default = /*#__PURE__*/React.memo(DatePickerModalContent);
//# sourceMappingURL=DatePickerModalContent.js.map