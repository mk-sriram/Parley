"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.dayNamesHeight = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _DayName = _interopRequireDefault(require("./DayName"));
var _reactNativePaper = require("react-native-paper");
var _dateUtils = require("./dateUtils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const dayNamesHeight = exports.dayNamesHeight = 44;

// TODO: wait for a better Intl api ;-)
const weekdays = [new Date(2020, 7, 2), new Date(2020, 7, 3), new Date(2020, 7, 4), new Date(2020, 7, 5), new Date(2020, 7, 6), new Date(2020, 7, 7), new Date(2020, 7, 8)];
function DayNames({
  disableWeekDays,
  locale
}) {
  const theme = (0, _reactNativePaper.useTheme)();
  const shortDayNames = React.useMemo(() => {
    const formatter = new Intl.DateTimeFormat(locale, {
      weekday: 'narrow'
    });
    return weekdays.map(date => formatter.format(date));
  }, [locale]);
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.dayNames, {
      backgroundColor: theme.colors.surface
    }],
    pointerEvents: 'none'
  }, shortDayNames.filter((_, dayIndex) => (0, _dateUtils.showWeekDay)(dayIndex, disableWeekDays)).map((dayName, i) => /*#__PURE__*/React.createElement(_DayName.default, {
    key: `${dayName}_${i}`,
    label: dayName
  })));
}
const styles = _reactNative.StyleSheet.create({
  dayNames: {
    height: dayNamesHeight,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#fff'
  }
});
var _default = exports.default = /*#__PURE__*/React.memo(DayNames);
//# sourceMappingURL=DayNames.js.map