"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getCalendarHeaderHeight = getCalendarHeaderHeight;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _DayNames = _interopRequireWildcard(require("./DayNames"));
var _utils = require("../translations/utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const buttonContainerHeight = 56;
const buttonContainerMarginTop = 4;
const buttonContainerMarginBottom = 8;
function getCalendarHeaderHeight(scrollMode) {
  if (scrollMode === 'horizontal') {
    return buttonContainerHeight + buttonContainerMarginTop + buttonContainerMarginBottom + _DayNames.dayNamesHeight;
  }
  return _DayNames.dayNamesHeight;
}
function CalendarHeader({
  scrollMode,
  onPrev,
  onNext,
  disableWeekDays,
  locale
}) {
  const theme = (0, _reactNativePaper.useTheme)();
  const isHorizontal = scrollMode === 'horizontal';
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.datePickerHeader,
    pointerEvents: 'box-none'
  }, isHorizontal ? /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.buttonContainer,
    pointerEvents: 'box-none'
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.spacer,
    pointerEvents: 'box-none'
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.buttonWrapper, {
      backgroundColor: theme.colors.surface
    }]
  }, /*#__PURE__*/React.createElement(_reactNativePaper.IconButton, {
    icon: "chevron-left",
    accessibilityLabel: (0, _utils.getTranslation)(locale, 'previous'),
    onPress: onPrev
  })), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.buttonWrapper, {
      backgroundColor: theme.colors.surface
    }]
  }, /*#__PURE__*/React.createElement(_reactNativePaper.IconButton, {
    icon: "chevron-right",
    accessibilityLabel: (0, _utils.getTranslation)(locale, 'next'),
    onPress: onNext
  }))) : null, /*#__PURE__*/React.createElement(_DayNames.default, {
    disableWeekDays: disableWeekDays,
    locale: locale
  }));
}
const styles = _reactNative.StyleSheet.create({
  datePickerHeader: {
    position: 'absolute',
    top: 0,
    right: 0,
    left: 0,
    zIndex: 10
  },
  buttonContainer: {
    height: buttonContainerHeight,
    marginTop: buttonContainerMarginTop,
    marginBottom: buttonContainerMarginBottom,
    flexDirection: 'row',
    alignItems: 'center'
  },
  buttonWrapper: {},
  spacer: {
    flex: 1
  }
});
var _default = exports.default = /*#__PURE__*/React.memo(CalendarHeader);
//# sourceMappingURL=CalendarHeader.js.map