"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _timeUtils = require("./timeUtils");
var _TimeInput = _interopRequireDefault(require("./TimeInput"));
var _AmPmSwitcher = _interopRequireDefault(require("./AmPmSwitcher"));
var _utils = require("../utils");
var _color = _interopRequireDefault(require("color"));
var _utils2 = require("../translations/utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function TimeInputs({
  hours,
  minutes,
  onFocusInput,
  focused,
  inputType,
  onChange,
  is24Hour,
  inputFontSize,
  locale
}) {
  const startInput = React.useRef(null);
  const endInput = React.useRef(null);
  const dimensions = (0, _reactNative.useWindowDimensions)();
  const isLandscape = dimensions.width > dimensions.height;
  const theme = (0, _reactNativePaper.useTheme)();
  const onSubmitStartInput = React.useCallback(() => {
    if (endInput.current) {
      endInput.current.focus();
    }
  }, [endInput]);
  const onSubmitEndInput = React.useCallback(() => {
    // TODO: close modal and persist time
  }, []);
  const minutesRef = (0, _utils.useLatest)(minutes);
  const onChangeHours = React.useCallback(newHours => {
    onChange({
      hours: newHours,
      minutes: minutesRef.current,
      focused: _timeUtils.clockTypes.hours
    });
  }, [onChange, minutesRef]);
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.inputContainer, isLandscape && styles.inputContainerLandscape]
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.column
  }, /*#__PURE__*/React.createElement(_TimeInput.default, {
    ref: startInput,
    inputFontSize: inputFontSize,
    placeholder: '00',
    value: (0, _timeUtils.toHourInputFormat)(hours, is24Hour),
    clockType: _timeUtils.clockTypes.hours,
    pressed: focused === _timeUtils.clockTypes.hours,
    onPress: onFocusInput,
    inputType: inputType,
    maxFontSizeMultiplier: 1.2,
    selectionColor: theme.dark ? (0, _color.default)(theme.colors.primary).darken(0.2).hex() : theme.colors.primary,
    returnKeyType: 'next',
    onSubmitEditing: onSubmitStartInput,
    blurOnSubmit: false,
    onChanged: newHoursFromInput => {
      let newHours = (0, _timeUtils.toHourOutputFormat)(newHoursFromInput, hours, is24Hour);
      if (newHoursFromInput > 24) {
        newHours = 24;
      }
      onChange({
        hours: newHours,
        minutes
      });
    }
  }), inputType === 'keyboard' ? /*#__PURE__*/React.createElement(_reactNativePaper.Text, {
    maxFontSizeMultiplier: 1.5,
    variant: "bodySmall"
  }, (0, _utils2.getTranslation)(locale, 'hour', 'Hour')) : null), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.hoursAndMinutesSeparator,
    // eslint-disable-next-line react-native/no-inline-styles
    {
      marginBottom: inputType === 'keyboard' ? 24 : 0
    }]
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.spaceDot
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.dot, {
      backgroundColor: theme?.isV3 ? theme.colors.onSurface : theme.colors.text
    }]
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.betweenDot
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: [styles.dot, {
      backgroundColor: theme?.isV3 ? theme.colors.onSurface : theme.colors.text
    }]
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.spaceDot
  })), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.column
  }, /*#__PURE__*/React.createElement(_TimeInput.default, {
    ref: endInput,
    inputFontSize: inputFontSize,
    placeholder: '00',
    value: minutes,
    clockType: _timeUtils.clockTypes.minutes,
    pressed: focused === _timeUtils.clockTypes.minutes,
    onPress: onFocusInput,
    inputType: inputType,
    maxFontSizeMultiplier: 1.2,
    selectionColor: theme.dark ? (0, _color.default)(theme.colors.primary).darken(0.2).hex() : theme.colors.primary,
    onSubmitEditing: onSubmitEndInput,
    onChanged: newMinutesFromInput => {
      let newMinutes = newMinutesFromInput;
      if (newMinutesFromInput > 59) {
        newMinutes = 59;
      }
      onChange({
        hours,
        minutes: newMinutes
      });
    }
  }), inputType === 'keyboard' ? /*#__PURE__*/React.createElement(_reactNativePaper.Text, {
    maxFontSizeMultiplier: 1.5,
    variant: "bodySmall"
  }, (0, _utils2.getTranslation)(locale, 'minute', 'Minute')) : null), !is24Hour && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.spaceBetweenInputsAndSwitcher
  }), /*#__PURE__*/React.createElement(_AmPmSwitcher.default, {
    hours: hours,
    onChange: onChangeHours,
    inputType: inputType
  })));
}
const styles = _reactNative.StyleSheet.create({
  column: {
    flexDirection: 'column'
  },
  spaceBetweenInputsAndSwitcher: {
    width: 12
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  inputContainerLandscape: {
    flex: 1
  },
  hoursAndMinutesSeparator: {
    fontSize: 65,
    width: 24,
    alignItems: 'center'
  },
  spaceDot: {
    flex: 1
  },
  dot: {
    width: 7,
    height: 7,
    borderRadius: 7 / 2
  },
  betweenDot: {
    height: 12
  }
});
var _default = exports.default = /*#__PURE__*/React.memo(TimeInputs);
//# sourceMappingURL=TimeInputs.js.map