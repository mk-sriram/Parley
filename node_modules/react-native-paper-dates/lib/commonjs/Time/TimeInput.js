"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativePaper = require("react-native-paper");
var _color = _interopRequireDefault(require("color"));
var _timeUtils = require("./timeUtils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function TimeInput({
  value,
  clockType,
  pressed,
  onPress,
  onChanged,
  inputType,
  inputFontSize = 57,
  ...rest
}, ref) {
  const [controlledValue, setControlledValue] = React.useState(`${value}`);
  const onInnerChange = text => {
    setControlledValue(text);
    if (text !== '' && text !== '0') {
      onChanged(Number(text));
    }
  };
  React.useEffect(() => {
    setControlledValue(`${value}`);
  }, [value]);
  const theme = (0, _reactNativePaper.useTheme)();
  const [inputFocused, setInputFocused] = React.useState(false);
  const highlighted = inputType === _timeUtils.inputTypes.picker ? pressed : inputFocused;
  const {
    color,
    backgroundColor
  } = (0, _timeUtils.useInputColors)(highlighted);
  let formattedValue = controlledValue;
  if (!inputFocused) {
    formattedValue = controlledValue.length === 1 ? `0${controlledValue}` : `${controlledValue}`;
  }
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.root
  }, /*#__PURE__*/React.createElement(_reactNative.TextInput, _extends({
    ref: ref,
    style: [styles.input,
    // eslint-disable-next-line react-native/no-inline-styles
    {
      color,
      fontFamily: theme?.isV3 ? theme.fonts.titleMedium.fontFamily : theme.fonts.medium.fontFamily,
      fontSize: inputFontSize,
      backgroundColor,
      borderRadius: theme.roundness * 2,
      borderColor: theme.isV3 && highlighted ? theme.colors.onPrimaryContainer : undefined,
      borderWidth: theme.isV3 && highlighted ? 2 : 0,
      height: inputType === _timeUtils.inputTypes.keyboard ? 72 : 80
    }],
    maxFontSizeMultiplier: 1.5,
    value: formattedValue,
    maxLength: 2,
    onFocus: () => setInputFocused(true),
    onBlur: () => setInputFocused(false),
    keyboardAppearance: theme.dark ? 'dark' : 'default',
    keyboardType: "number-pad",
    onChangeText: onInnerChange
  }, rest)), onPress && inputType === _timeUtils.inputTypes.picker ? /*#__PURE__*/React.createElement(_reactNativePaper.TouchableRipple, {
    style: [_reactNative.StyleSheet.absoluteFill, styles.buttonOverlay, {
      borderRadius: theme.roundness
    }],
    rippleColor: _reactNative.Platform.OS !== 'ios' ? (0, _color.default)(theme.colors.onSurface).fade(0.7).hex() : undefined,
    onPress: () => onPress(clockType),
    borderless: true
  }, /*#__PURE__*/React.createElement(_reactNative.View, null)) : null);
}
const styles = _reactNative.StyleSheet.create({
  root: {
    position: 'relative',
    height: 80,
    width: 96
  },
  input: {
    textAlign: 'center',
    textAlignVertical: 'center',
    width: 96
  },
  buttonOverlay: {
    overflow: 'hidden'
  }
});
var _default = exports.default = /*#__PURE__*/React.forwardRef(TimeInput);
//# sourceMappingURL=TimeInput.js.map